---
# Homebrew work
- name: Install Homebrew
  shell: "ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install) creates=/usr/local/bin/brew"
  register: brew_install

- name: homebrew tap cask
  homebrew_tap: tap=caskroom/cask

- name: install brews
  homebrew: name={{item}} update_homebrew=yes upgrade_all=yes state=latest
  with_items: homebrew.brews

- name: homebrew cask install software
  homebrew_cask: name={{item}}
  with_items: homebrew.casks

- name: atom modules
  command: apm install {{item}}
  with_items: apm.modules

- name: python pip
  #sudo: yes
  pip: name={{item}} state=latest executable=/usr/local/bin/pip
  with_items: pip.modules

# Grab Dotfiles
- name: Grab dot files
  get_url: url={{item.url}} dest={{item.dest}}
  with_items:
  - { url: 'https://raw.githubusercontent.com/joethemongoose/Dotfiles/master/zfunctions',   dest: '~/.zfunctions'  }
  - { url: 'https://raw.githubusercontent.com/joethemongoose/Dotfiles/master/zshenv-osx',   dest: '~/.zshenv'      }
  - { url: 'https://raw.githubusercontent.com/joethemongoose/Dotfiles/master/zshrc-osx',    dest: '~/.zshrc'       }
  #  - { url: 'https://raw.githubusercontent.com/joethemongoose/Dotfiles/master/zshrc.zni',    dest: '~/.zshrc.zni'   }
  - { url: 'https://raw.githubusercontent.com/joethemongoose/Dotfiles/master/tmux.conf',    dest: '~/.tmux.conf'   }
  - { url: 'https://raw.githubusercontent.com/joethemongoose/Dotfiles/master/vimrc.after',  dest: '~/.vimrc.after' }

# you really don't want to do this. it can break apple's software updater
#- name: Change shell to zsh
#  sudo: yes
#  when: lookup('env','SHELL') != "/usr/local/bin/zsh"
#  command: "chsh -s /usr/local/bin/zsh {{ lookup('env', 'USER') }}"
#  register: changed_shell
#  changed_when: '"no changes made" not in changed_shell.stderr'

# install antigen
- name: get antigen
  git: repo=https://github.com/zsh-users/antigen.git dest=~/.antigen

- name: update antigen
  shell: "executable=/usr/local/bin/zsh chdir=~ source .antigen/antigen.zsh && antigen-update"

# RVM
- name: install rvm
  when: ! lookup('env','rvm_version')
  shell: "curl -sSL https://get.rvm.io | /bin/bash -s stable --ruby={{ruby_version}} --ignore-dotfiles --autolibs=4 creates=~/.rvm"
  register: rvm_install

- name: autoload rvm
  lineinfile: dest=~/.rvmrc line="rvm_auto_reload_flag=2" create=yes

- name: update rvm
  when: lookup('pipe','curl -sSL https://raw.github.com/wayneeseguin/rvm/stable/VERSION') not in lookup('env','rvm_version')
  shell: "executable=/usr/local/bin/zsh load_rvm && rvm get stable --ignore-dotfiles --autolibs=4 && rvm"

- name: install ruby version {{ruby_version}}
  shell: "executable=/usr/local/bin/zsh load_rvm && rvm install --default {{ruby_version}} creates=~/.rvm/rubies/ruby-{{ruby_version}}"
  register: ruby_install

- name: ensure {{ruby_version}} is current and default
  when: ruby_version not in lookup('env', 'RUBY_VERSION')
  shell: "executable=/usr/local/bin/zsh load_rvm && rvm use default"

- name: list rubies
  when: ruby_install.changed
  shell: "executable=/usr/local/bin/zsh load_rvm && rvm list strings | grep -v {{ruby_version}}"
  register: rubies

- name: purge old rubies
  when: rubies.changed
  shell: "executable=/usr/local/bin/zsh load_rvm && rvm remove {{item}}"
  with_items: rubies.stdout_lines

# NVM
- name: clone nvm
  git: repo=https://github.com/creationix/nvm.git dest=~/.nvm update=yes

- name: install nodejs version {{node_version}}
  shell: "executable=/usr/local/bin/zsh load_nvm && nvm install {{node_version}} creates=~/.nvm/{{node_version}}"
  register: nodejs_install

- name: check nvm alias
  shell: "executable=/usr/local/bin/zsh load_nvm && nvm alias"
  register: nvm_alias
  changed_when: false

- name: make nodejs default
  shell: "executable=/usr/local/bin/zsh load_nvm && nvm alias default {{node_version}}"
  register: nvm_default
  changed_when: '"{{nvm_alias}}" not in nvm_default.stdout'

- name: list nodejs installs
  when: nodejs_install.changed
  shell: "executable=/usr/local/bin/zsh load_nvm && nvm list | awk '{print $2 }' | grep -Ev '{{node_version}}|>' | strings"
  register: nvms

- name: purge old nodejs installs
  when: nvms.changed
  shell: "executable=/usr/local/bin/zsh load_nvm && nvm uninstall {{item}}"
  with_items: nvms.stdout_lines
  failed_when: false

# GVM
- name: install gvm wrapper
  shell: "executable=/usr/local/bin/zsh curl -sSL https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer | /bin/bash creates=~/.gvm"
  ignore_errors: yes

- name: install go version go{{go_version}}
  shell: "executable=/usr/local/bin/zsh load_gvm && gvm install go{{go_version}} --binary creates=~/.gvm/gos/go{{go_version}}"
  register: go_install

- name: make go{{go_version}} default
  when: go_version not in lookup('env', 'gvm_go_name')
  shell: "executable=/usr/local/bin/zsh load_gvm && gvm use go{{go_version}} --default"
  register: gvm_default
  changed_when: '"Now using version go{{go_version}}" in gvm_default.stdout'

- name: list unused go installs
  when: go_install|changed
  shell: "executable=/usr/local/bin/zsh load_gvm && gvm list | grep -e go\\[1-9\\] | grep -v \\=\\>"
  register: go_unused

- name: remove unused go installs
  when: go_unused|changed
  shell: "executable=/usr/local/bin/zsh load_gvm && gvm uninstall {{item}}"
  with_items: go_unused.stdout_lines

# Janus
- name: get janus
  git: repo=https://github.com/carlhuda/janus.git dest=~/.vim update=yes force=yes
  register: get_janus

- name: update janus
  when: get_janus.changed
  shell: "executable=/usr/local/bin/zsh chdir=~/.vim rake default -qs"

# Rust
# - name: install multirust
#   shell: "curl -sf https://raw.githubusercontent.com/brson/multirust/master/blastoff.sh | sh"
#
# - name: install Rust
#   command: "/usr/local/bin/multirust update"
