---
# Homebrew work
- name: Install Homebrew
  shell: "ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install) creates=/usr/local/bin/brew"
  register: brew_install

- name: homebrew tap cask/fonts
  homebrew_tap: tap="{{item}}"
  with_items:
    - caskroom/cask
    - caskroom/fonts

- name: install brews
  homebrew: name={{item}} update_homebrew=yes upgrade_all=yes state=latest
  with_items: homebrew.brews

- name: homebrew cask install software
  homebrew_cask: name={{item}}
  with_items: homebrew.casks

- name: atom modules
  command: apm install {{item}}
  with_items: apm.modules

- name: python pip
  #sudo: yes
  pip: name={{item}} state=latest executable=/usr/local/bin/pip
  with_items: pip.modules

# Grab Dotfiles
- name: Grab dot files
  get_url: url={{item.url}} dest={{item.dest}}
  with_items:
  - { url: 'https://raw.githubusercontent.com/jkordish/Dotfiles/master/zfunctions',   dest: '~/.zfunctions'  }
  - { url: 'https://raw.githubusercontent.com/jkordish/Dotfiles/master/zshenv-osx',   dest: '~/.zshenv'      }
  - { url: 'https://raw.githubusercontent.com/jkordish/Dotfiles/master/zshrc-osx',    dest: '~/.zshrc'       }
  - { url: 'https://raw.githubusercontent.com/jkordish/Dotfiles/master/tmux.conf',    dest: '~/.tmux.conf'   }
  - { url: 'https://raw.githubusercontent.com/jkordish/Dotfiles/master/vimrc.after',  dest: '~/.vimrc.after' }

# install antigen
- name: get antigen
  git: repo=https://github.com/zsh-users/antigen.git dest=~/.antigen force=yes

- name: update antigen
  shell: "executable={{shell}} chdir=~ source .antigen/antigen.zsh && antigen-update"

# RVM
- name: install rvm
  when: ! lookup('env','rvm_version')
  shell: "curl -sSL https://get.rvm.io | /bin/bash -s stable --ruby={{ruby_version}} --ignore-dotfiles --autolibs=4 creates=~/.rvm"
  register: rvm_install

- name: autoload rvm
  lineinfile: dest=~/.rvmrc line="rvm_auto_reload_flag=2" create=yes

- name: update rvm
  when: ! lookup('pipe','curl -sSL https://raw.github.com/wayneeseguin/rvm/stable/VERSION') in lookup('env','rvm_version')
  shell: "executable={{shell}} rvm get stable --quiet-curl --ignore-dotfiles --autolibs=4"

- name: install ruby
  shell: "executable={{shell}} rvm install --quiet-curl --default {{ruby_version}} creates=~/.rvm/rubies/ruby-{{ruby_version}}"
  register: ruby_install

- name: set default ruby
  when: ! ruby_version in lookup('env', 'RUBY_VERSION')
  shell: "executable={{shell}} rvm use default"

- name: list rubies
  #when: ruby_install.changed
  shell: "executable={{shell}} rvm list strings"
  register: rubies

- name: purge old rubies
  when: rubies.stdout_lines | length > 1
  shell: "executable={{shell}} rvm remove {{item}}"
  with_items: rubies.stdout_lines[:1]

# NVM
- name: clone nvm
  git: repo=https://github.com/creationix/nvm.git dest=~/.nvm update=yes

- name: install node
  when: ! node_version in lookup('env', 'NVM_VERSION')
  shell: "executable={{shell}} nvm install {{node_version}} creates=~/.nvm/{{node_version}}"
  register: node_install

- name: make node default
  when: ! node_version in lookup('env', 'NVM_VERSION')
  shell: "executable={{shell}} nvm alias default {{node_version}}"

- name: list nodejs installs
  when: node_install.changed
  shell: "executable={{shell}} nvm list | awk '{print $2}' | grep -Ev '{{node_version}}|>|system' | strings"
  register: nvms

- name: purge old nodejs installs
  when: nvms | length >= 1
  shell: "executable={{shell}} nvm uninstall {{item}}"
  with_items: nvms.stdout_lines

# GVM
- name: install gvm wrapper
  shell: "executable={{shell}} curl -sSL https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer | {{shell}} creates=~/.gvm"
  ignore_errors: yes

- name: install go versions
  shell: "executable={{shell}} gvm install {{item}} && gvm use {{item}} --default creates=~/.gvm/environments/{{item}}"
  with_items: gvm

- name: install gom
  shell: "executable={{shell}} gvm use {{item}} && go get github.com/mattn/gom"
  with_items: gvm

- name: install godep
  shell: "executable={{shell}} gvm use {{item}} && go get github.com/tools/godep"
  with_items: gvm

- name: make {{gvm[1]}} default
  shell: "executable={{shell}} gvm use {{gvm[1]}} --default"

# Janus
- name: get janus
  git: repo=https://github.com/carlhuda/janus.git dest=~/.vim force=yes
  changed_when: get_janus.before != get_janus.after
  register: get_janus

- name: update janus
  shell: "executable={{shell}} chdir=~/.vim rake default -qs"

# Rust
# moved the installation of multirust to homebrew
# - name: get multirust
#   get_url:
#     url: https://raw.githubusercontent.com/brson/multirust/master/blastoff.sh
#     dest: /tmp/blastoff.sh
#     mode: 0755
#
# - name: install multirust
#   become: yes
#   become_user: "{{lookup('env', 'USER')}}"
#   become_method: sudo
#   expect:
#     creates: /usr/local/bin/multirust
#     command: /tmp/blastoff.sh
#     responses:
#       Ready: Y

- name: set default rust toolchain to nightly
  command: multirust default nightly

- name: update rust
  command: "multirust update"
